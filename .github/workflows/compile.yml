name: Compile

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          os: [ubuntu-18.04, ubuntu-16.04]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Get dependencies from APK
      run: |
        sudo apt-get update -qq
        sudo apt-get -y install \
            autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev
            
    - name: Make directories
      run: mkdir -p ${{ github.workspace }}/ffmpeg_sources ${{ github.workspace }}/bin

    # Runs a single command using the runners shell
    - name: Get NASM
      run: sudo apt-get install nasm

    # Runs a set of commands using the runners shell
    - name: Include h.264
      run: sudo apt-get install libx264-dev
      
    - name: Include h.265
      run: sudo apt-get install libx265-dev libnuma-dev
    
    - name: Include VPX
      run: sudo apt-get install libvpx-dev
      
    - name: Include AAC
      run: sudo apt-get install libfdk-aac-dev
      
    - name: Include MP3
      run: sudo apt-get install libmp3lame-dev
      
    - name: Include Opus
      run: sudo apt-get install libopus-dev
   
    - name: Grab libaom
      uses: actions/cache@v2
      id: cache-libaom
      with:
        path: ${{ github.workspace }}/ffmpeg_build
        key: ${{ github.workspace }}/ffmpeg_build 

    - name: libaom
      if: steps.cache-libaom.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}/ffmpeg_sources && \
        git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom && \
        mkdir -p aom_build && \
        cd aom_build && \
        PATH="${{ github.workspace }}/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/ffmpeg_build" -DENABLE_SHARED=off -DENABLE_NASM=on ../aom && \
        PATH="${{ github.workspace }}/bin:$PATH" make && \
        make install
    
    - name: Compile
      run: |
        cd ${{ github.workspace }}/ffmpeg_sources
        wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2
        tar xjvf ffmpeg-snapshot.tar.bz2
        cd ffmpeg
        export PATH="${{ github.workspace }}/bin:$PATH"
        export PKG_CONFIG_PATH="${{ github.workspace }}/ffmpeg_build/lib/pkgconfig"
        ./configure \
          --prefix="${{ github.workspace }}/ffmpeg_build" \
          --extra-cflags="-I${{ github.workspace }}/ffmpeg_build/include -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC" \
          --extra-ldflags="-L${{ github.workspace }}/ffmpeg_build/lib" \
          --enable-pic
          --extra-libs="-lpthread -lm" \
          --bindir="${{ github.workspace }}/bin" \
          --enable-gpl \
          --enable-libaom \
          --enable-libass \
          --enable-libfdk-aac \
          --enable-libfreetype \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libvorbis \
          --enable-libvpx \
          --enable-libx264 \
          --enable-libx265 \
          --enable-nonfree \
          --enable-shared
        make
        make install
        hash -r
      
